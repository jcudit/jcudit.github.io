---
title:  "Testing TCP MD5SIG"
---

# Overview
I came across this while reading up on BGP: https://www.ietf.org/rfc/rfc2385.txt.  It seems like it'd be useful for guarding connections  against spoofed resets generated by adversaries.  [Socat](http://www.dest-unreach.org/socat/doc/socat.html) seems to support this - but not for Linux.  For testing purposes, an alternative to enabling this in socat is [tcpauth](https://github.com/google/tcpauth), which replaces stdin/stdout with sockets that have TCP_MD5SIG enabled.  The key takeaways here are:

* It works with modern kernels
* It effectively ignores unsigned spoofed RSTs

# Experiment
The following experimentation was done in a Jessie Docker container using the 4.4.14 kernel with MD5SIG enabled:
```
judit@linux:~$ grep -nr MD5SIG /boot/config-*
/boot/config-2.6.32-5-amd64:619:CONFIG_TCP_MD5SIG=y
/boot/config-3.14.18-cloudflare:736:CONFIG_TCP_MD5SIG=y
```

## Without `tcpauth`

Start a TCP server.  This is an echo sever listening on TCP/12345.
```
root@linux:~/tcpauth# nc -l -p 12345 -k -c 'xargs -n1 /usr/games/cowsay'
```
Talk to the TCP server.
```
root@linux:~/tcpauth# echo hello | nc 127.0.0.1 12345
 _______
< hello >
 -------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
```
Enhance.
```
root@linux:~# tcpdump -nn -i lo port 12345
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
15:28:20.855787 IP 127.0.0.1.45094 > 127.0.0.1.12345: Flags [S], seq 3587912928, win 43690, options [mss 65495,sackOK,TS val 10912548 ecr 0,nop,wscale 7], length 0
15:28:20.855807 IP 127.0.0.1.12345 > 127.0.0.1.45094: Flags [S.], seq 2284305898, ack 3587912929, win 43690, options [mss 65495,sackOK,TS val 10912548 ecr 10912548,nop,wscale 7], length 0
15:28:20.855818 IP 127.0.0.1.45094 > 127.0.0.1.12345: Flags [.], ack 1, win 342, options [nop,nop,TS val 10912548 ecr 10912548], length 0
15:28:20.856665 IP 127.0.0.1.45094 > 127.0.0.1.12345: Flags [P.], seq 1:7, ack 1, win 342, options [nop,nop,TS val 10912548 ecr 10912548], length 6
15:28:20.856680 IP 127.0.0.1.12345 > 127.0.0.1.45094: Flags [.], ack 7, win 342, options [nop,nop,TS val 10912548 ecr 10912548], length 0
15:28:20.903083 IP 127.0.0.1.12345 > 127.0.0.1.45094: Flags [P.], seq 1:152, ack 7, win 342, options [nop,nop,TS val 10912553 ecr 10912548], length 151
15:28:20.903095 IP 127.0.0.1.45094 > 127.0.0.1.12345: Flags [.], ack 152, win 350, options [nop,nop,TS val 10912553 ecr 10912553], length 0
15:28:53.166820 IP 127.0.0.1.45094 > 127.0.0.1.12345: Flags [F.], seq 7, ack 152, win 350, options [nop,nop,TS val 10915779 ecr 10912553], length 0
15:28:53.167611 IP 127.0.0.1.12345 > 127.0.0.1.45094: Flags [F.], seq 152, ack 8, win 342, options [nop,nop,TS val 10915779 ecr 10915779], length 0
15:28:53.167649 IP 127.0.0.1.45094 > 127.0.0.1.12345: Flags [.], ack 153, win 350, options [nop,nop,TS val 10915779 ecr 10915779], length 0
```

## Susceptive to RSTs
Using the above setup, a spoofed RST can disrupt the connection.  For example, start a TCP server just like before:
```
root@linux:~/tcpauth# nc -l -p 12349 -k -c 'xargs -n1 /usr/games/cowsay'
```
Handshake the TCP server.
```
root@linux:~/tcpauth# nc 127.0.0.1 12349
...do not write anything...
```

Spoof a RST targetting the established connection above:
```
root@linux:~# hping3 -c 1 -p 12349 --baseport 47740 --keep -w 0 -M 3724485825 -R 127.0.0.1
HPING 127.0.0.1 (lo 127.0.0.1): R set, 40 headers + 0 data bytes

--- 127.0.0.1 hping statistic ---
1 packets transmitted, 0 packets received, 100% packet loss
round-trip min/avg/max = 0.0/0.0/0.0 ms
```

Observe the connection fail on the server side:
```
root@linux:~/tcpauth# nc -l -p 12349 -k -c 'xargs -n1 /usr/games/cowsay'
xargs: error closing file
```

Write something from the client to the defunct connection:
```
root@linux:~/tcpauth# nc 127.0.0.1 12349
hello?
```
Enhance.
```
root@linux:~# tcpdump -nn -i lo port 12349
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
16:49:53.493674 IP 127.0.0.1.47740 > 127.0.0.1.12349: Flags [S], seq 3724485824, win 43690, options [mss 65495,sackOK,TS val 11401812 ecr 0,nop,wscale 7], length 0
16:49:53.493700 IP 127.0.0.1.12349 > 127.0.0.1.47740: Flags [S.], seq 931058450, ack 3724485825, win 43690, options [mss 65495,sackOK,TS val 11401812 ecr 11401812,nop,wscale 7], length 0
16:49:53.493718 IP 127.0.0.1.47740 > 127.0.0.1.12349: Flags [.], ack 1, win 342, options [nop,nop,TS val 11401812 ecr 11401812], length 0
...spoof begin...
16:50:28.209790 IP 127.0.0.1.47740 > 127.0.0.1.12349: Flags [R], seq 3724485825, win 0, length 0
...spoof end...
16:50:44.948485 IP 127.0.0.1.47740 > 127.0.0.1.12349: Flags [P.], seq 1:8, ack 1, win 342, options [nop,nop,TS val 11406958 ecr 11401812], length 7
16:50:44.948516 IP 127.0.0.1.12349 > 127.0.0.1.47740: Flags [R], seq 931058451, win 0, length 0
```
Here we see the handshake succeed followed by the spoofed RST segment attacking the server.  The client then attempts to send it's valid data but is met with a reset from the server as the connection no longer exists.

## With `tcpauth` and without an authenticating client

Start the same TCP server wrapped by the `tcpauth` binary.
```
root@linux:~/tcpauth# ./tcpauth-wrap -p 12346 -P pw.txt -- xargs -n1 /usr/games/cowsay
Listening on :: port 12345
Next binary: xargs
Args:
  xargs
  -n1
  /usr/games/cowsay
```

Talk to the TCP server.  Note the lack of response.
```
root@linux:~/tcpauth# echo moo | nc 127.0.0.1 12346
...hangs...
^C
```
Enhance.
```
root@linux:~# tcpdump -M whatever -nn -i lo port 12346
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
15:32:22.278819 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [S], seq 4183370678, win 43690, options [mss 65495,sackOK,TS val 10936691 ecr 0,nop,wscale 7], length 0
15:32:22.278852 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [S.], seq 3500491635, ack 4183370679, win 43690, options [mss 65495,sackOK,TS val 10936691 ecr 10936691,nop,wscale 7], length 0
15:32:22.278865 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [.], ack 1, win 342, options [nop,nop,TS val 10936691 ecr 10936691], length 0
15:32:22.278996 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [P.], seq 1:5, ack 1, win 342, options [nop,nop,TS val 10936691 ecr 10936691], length 4
15:32:22.279001 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [.], ack 5, win 342, options [nop,nop,TS val 10936691 ecr 10936691], length 0
15:32:22.311523 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 10936694 ecr 10936691], length 145
15:32:22.508425 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 10936714 ecr 10936691], length 145
15:32:22.708476 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 10936734 ecr 10936691], length 145
15:32:23.108628 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 10936774 ecr 10936691], length 145
15:32:23.908587 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 10936854 ecr 10936691], length 145
15:32:25.508468 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 10937014 ecr 10936691], length 145
15:32:28.718539 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 10937335 ecr 10936691], length 145
15:32:35.129026 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 10937976 ecr 10936691], length 145
15:32:47.968554 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 10939260 ecr 10936691], length 145
15:33:13.608613 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 10941824 ecr 10936691], length 145
...hangs...
15:33:52.717821 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [F.], seq 5, ack 1, win 342, options [nop,nop,TS val 10945734 ecr 10936691], length 0
15:33:52.918725 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [F.], seq 5, ack 1, win 342, options [nop,nop,TS val 10945755 ecr 10936691], length 0
15:33:53.129369 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [F.], seq 5, ack 1, win 342, options [nop,nop,TS val 10945776 ecr 10936691], length 0
15:33:53.549461 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [F.], seq 5, ack 1, win 342, options [nop,nop,TS val 10945818 ecr 10936691], length 0
15:33:54.388811 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [F.], seq 5, ack 1, win 342, options [nop,nop,TS val 10945902 ecr 10936691], length 0
15:33:56.069016 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [F.], seq 5, ack 1, win 342, options [nop,nop,TS val 10946070 ecr 10936691], length 0
15:33:59.439073 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [F.], seq 5, ack 1, win 342, options [nop,nop,TS val 10946407 ecr 10936691], length 0
15:34:04.968480 IP 127.0.0.1.12346 > 127.0.0.1.46190: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 10946960 ecr 10936691], length 145
15:34:06.168583 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [F.], seq 5, ack 1, win 342, options [nop,nop,TS val 10947080 ecr 10936691], length 0
15:34:19.648757 IP 127.0.0.1.46190 > 127.0.0.1.12346: Flags [F.], seq 5, ack 1, win 342, options [nop,nop,TS val 10948428 ecr 10936691], length 0
```
There are a few interesting things here:

* I have supplied the MD5 secret via the `-M` switch for the `tcpdump` command
* After the 3-way handshake, an inital 4 bytes of data ("moo") is sent from the client to the server.  There is no MD5 signature attached.
* The server responds with a TCP segment carrying the output from the application server even though the client did not provide a signature.  This response is where the `tcpauth` binary starts sending the MD5SIG TCP option.  This is evident by the `md5valid` string showing up within the TCP options section.
* The client's TCP stack never delivers the received TCP payload to the client application.  This is evident when comparing to the next scenario as well as having no output arrive at the shell in the client's application layer.
* The `tcpauth` binary expects an ACK to the server's pushed data.  Retransmissions occur due to the lack of acknowledgement by the client due to the client's TCP stack dropping the server's signed TCP PSH segment.

## With `tcpauth` and an authenticating client
Start the same TCP server wrapped by the `tcpauth` binary.
```
root@linux:~/tcpauth# ./tcpauth-wrap -p 12347 -P pw.txt -- xargs -n1 /usr/games/cowsay
Listening on :: port 12347
Next binary: xargs
Args:
  xargs
  -n1
  /usr/games/cowsay
```
Talk to the TCP server.
```
root@linux:~/tcpauth# ./tcpauth-client-proxy -P pw.txt 127.0.0.1 12347
Connected to 127.0.0.1 port 12347
moo
 _____
< moo >
 -----
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
^C
```

Enhance.

```
root@linux:~# tcpdump -M whatever -nn -i lo port 12347
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
15:46:52.075073 IP 127.0.0.1.35990 > 127.0.0.1.12347: Flags [S], seq 1269300595, win 43690, options [mss 65495,sackOK,TS val 11023670 ecr 0,nop,wscale 7], length 0
15:46:52.075088 IP 127.0.0.1.12347 > 127.0.0.1.35990: Flags [S.], seq 4004488239, ack 1269300596, win 43690, options [mss 65495,sackOK,TS val 11023670 ecr 11023670,nop,wscale 7], length 0
15:46:52.075095 IP 127.0.0.1.35990 > 127.0.0.1.12347: Flags [.], ack 1, win 342, options [nop,nop,TS val 11023670 ecr 11023670], length 0
15:46:59.358124 IP 127.0.0.1.35990 > 127.0.0.1.12347: Flags [P.], seq 1:5, ack 1, win 342, options [nop,nop,md5valid,nop,nop,TS val 11024398 ecr 11023670], length 4
15:46:59.358200 IP 127.0.0.1.12347 > 127.0.0.1.35990: Flags [.], ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 11024398 ecr 11024398], length 0
15:46:59.386898 IP 127.0.0.1.12347 > 127.0.0.1.35990: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 11024401 ecr 11024398], length 145
15:46:59.386933 IP 127.0.0.1.35990 > 127.0.0.1.12347: Flags [.], ack 146, win 350, options [nop,nop,md5valid,nop,nop,TS val 11024401 ecr 11024401], length 0
16:04:54.176167 IP 127.0.0.1.35990 > 127.0.0.1.12347: Flags [F.], seq 5, ack 146, win 350, options [nop,nop,md5valid,nop,nop,TS val 11131880 ecr 11024401], length 0
16:04:54.176255 IP 127.0.0.1.12347 > 127.0.0.1.35990: Flags [F.], seq 146, ack 6, win 342, options [nop,nop,md5valid,nop,nop,TS val 11131880 ecr 11131880], length 0
16:04:54.176267 IP 127.0.0.1.35990 > 127.0.0.1.12347: Flags [.], ack 147, win 350, options [nop,nop,md5valid,nop,nop,TS val 11131880 ecr 11131880], length 0
```
This transaction is reminiscent of a plain transaction without using TCP_MD5SIG.  The expected behaviour occurs with the addition of the MD5 signature in the TCP options of both client and server segments after the 3-way handshake.

## Resilience to RSTs
Start the same TCP server wrapped by the `tcpauth` binary.
```
root@linux:~/tcpauth# ./tcpauth-wrap -p 12342 -P pw.txt -- xargs -n1 /usr/games/cowsay
Listening on :: port 12342
Next binary: xargs
Args:
  xargs
  -n1
  /usr/games/cowsay
```
Handshake the server.
```
root@linux:~/tcpauth# ./tcpauth-client-proxy -P pw.txt 127.0.0.1 12342
Connected to 127.0.0.1 port 12342
```
Spoof a RST to the server:
```
root@linux:~# hping3 -c 1 -p 12342 --baseport 42214 --keep -w 0 -M 1016531107 -R 127.0.0.1
HPING 127.0.0.1 (lo 127.0.0.1): R set, 40 headers + 0 data bytes

--- 127.0.0.1 hping statistic ---
1 packets transmitted, 0 packets received, 100% packet loss
round-trip min/avg/max = 0.0/0.0/0.0 ms
```
Finish transaction with the server from the client:
```
root@linux:~/tcpauth# ./tcpauth-client-proxy -P pw.txt 127.0.0.1 12342
Connected to 127.0.0.1 port 12342
MOO
 _____
< MOO >
 -----
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
^C
```
Enhance.
```
root@linux:~# tcpdump -M whatever -nn -i lo port 12342
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
17:03:52.561017 IP 127.0.0.1.42214 > 127.0.0.1.12342: Flags [S], seq 1016531106, win 43690, options [mss 65495,sackOK,TS val 11485719 ecr 0,nop,wscale 7], length 0
17:03:52.561035 IP 127.0.0.1.12342 > 127.0.0.1.42214: Flags [S.], seq 3174891042, ack 1016531107, win 43690, options [mss 65495,sackOK,TS val 11485719 ecr 11485719,nop,wscale 7], length 0
17:03:52.561046 IP 127.0.0.1.42214 > 127.0.0.1.12342: Flags [.], ack 1, win 342, options [nop,nop,TS val 11485719 ecr 11485719], length 0
...spoof begin...
17:04:43.239108 IP 127.0.0.1.42214 > 127.0.0.1.12342: Flags [R], seq 1016531107, win 0, length 0
...spoof end...
17:05:03.055705 IP 127.0.0.1.42214 > 127.0.0.1.12342: Flags [P.], seq 1:5, ack 1, win 342, options [nop,nop,md5valid,nop,nop,TS val 11492768 ecr 11485719], length 4
17:05:03.055757 IP 127.0.0.1.12342 > 127.0.0.1.42214: Flags [.], ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 11492768 ecr 11492768], length 0
17:05:03.090902 IP 127.0.0.1.12342 > 127.0.0.1.42214: Flags [P.], seq 1:146, ack 5, win 342, options [nop,nop,md5valid,nop,nop,TS val 11492772 ecr 11492768], length 145
17:05:03.091036 IP 127.0.0.1.42214 > 127.0.0.1.12342: Flags [.], ack 146, win 350, options [nop,nop,md5valid,nop,nop,TS val 11492772 ecr 11492772], length 0
17:05:10.668146 IP 127.0.0.1.42214 > 127.0.0.1.12342: Flags [F.], seq 5, ack 146, win 350, options [nop,nop,md5valid,nop,nop,TS val 11493529 ecr 11492772], length 0
17:05:10.668736 IP 127.0.0.1.12342 > 127.0.0.1.42214: Flags [F.], seq 146, ack 6, win 342, options [nop,nop,md5valid,nop,nop,TS val 11493530 ecr 11493529], length 0
17:05:10.668754 IP 127.0.0.1.42214 > 127.0.0.1.12342: Flags [.], ack 147, win 350, options [nop,nop,md5valid,nop,nop,TS val 11493530 ecr 11493530], length 0
```

Here we see an unsigned RST segment hit the server but not cause a disruption to the client-server connection.  After the RST was received by the server, the client was able to continue it's signed back-and-forth with the server and render the received output.
